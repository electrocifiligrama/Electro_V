#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language spanish-mexico
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1.5cm
\topmargin 2cm
\rightmargin 1.5cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style french
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Subsection
MIR UNIT
\end_layout

\begin_layout Subsubsection
Introducción
\end_layout

\begin_layout Standard
Este bloque es el encargado de manejar el correcto avance del pipeline y
 la propagación de las señales de control al resto de los módulos.
 El termino MIR se usa como abreviación de 
\begin_inset Quotes eld
\end_inset

MicroInstruction Register
\begin_inset Quotes erd
\end_inset

 y el bloque tiene este nombre debido a los registros que utiliza para guardar
 las señales de control de cada etapa del pipeline.Sus tareas se pueden identific
ar como:
\end_layout

\begin_layout Itemize
Dividir las señales de control de cada etapa del pipeline desde decode hasta
 writeback.
\end_layout

\begin_layout Itemize
Detectar dependencias y generar la señal de Hold correspondiente
\end_layout

\begin_layout Itemize
Vaciar o hacer 
\begin_inset Quotes eld
\end_inset

flush
\begin_inset Quotes erd
\end_inset

 del pipeline en caso de ser necesario
\end_layout

\begin_layout Itemize
Propagar las señales de control en la etapa correspondiente a los demás
 módulos
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename imagenes/MirUnitConsigna.PNG
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
MIRUnit en la consigna del Ev20
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename imagenes/MIRUnitQuartus.PNG

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
MirUnit en el esquemático de Quartus
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Imagen del modulo presentado en la consigna y su equivalente en Quartus
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Entradas y salidas
\end_layout

\begin_layout Standard
El modulo cuenta con 9 entradas y 11 salidas.
 Todas las entradas del modulo son leídas en los flancos positivos de clock
 (Salvo el flush que es asincronico) y todas las salidas son proporcionadas
 en los flancos descendentes de clock (salvo HOLD que es asincronica)
\end_layout

\begin_layout Standard
Las entradas son:
\end_layout

\begin_layout Itemize
MI (Microinstruccion de 32 bits proveniente de la ROM, su valor esta fijado
 por la instrucción que se desea ejecutar)
\end_layout

\begin_layout Itemize
Flush (Señal de 1 bit que se pone en alto cuando se desea 
\begin_inset Quotes eld
\end_inset

borrar
\begin_inset Quotes erd
\end_inset

 lo que se encuentra en el pipeline)
\end_layout

\begin_layout Itemize
Ain (Señal de 5 bits que indica que registro/puerto se desea mandar por
 el bus A)
\end_layout

\begin_layout Itemize
HOLD_CK2 (Señal de clock utilizada por el MIR correspondiente a la etapa
 de decode)
\end_layout

\begin_layout Itemize
IC (Señal de 6 bits que indica en que registro debe guardarse el resultado,
 solo se utiliza cuando MuxSelect esta en alto)
\end_layout

\begin_layout Itemize
MuxSelect (Señal de 1 bit que se pone en alto cuando debe utilizarse IC,
 si esta en bajo el registro destino se determina directamente de MI)
\end_layout

\begin_layout Itemize
CK3 (Señal de clock utilizada por el MIR correspondiente a la etapa de Operands)
\end_layout

\begin_layout Itemize
CK4 (Señal de clock utilizada por los MIR correspondientes a las etapas
 de Execute y de writeback)
\end_layout

\begin_layout Itemize
DAddIn (Señal de 11 bits que funciona como direccionamiento para acceder
 a la memoria de datos)
\end_layout

\begin_layout Standard
Mientras que las salidas son:
\end_layout

\begin_layout Itemize
HOLD (Señal de 1 bit que se pone en alto cuando se deben frenar las etapas
 de fetch y de decode)
\end_layout

\begin_layout Itemize
MRout (Señal de 1 bit que se pone en alto cuando se desea hacer una lectura
 de la memoria de datos)
\end_layout

\begin_layout Itemize
MWout (Igual que MRout pero para escritura)
\end_layout

\begin_layout Itemize
Aout (Señal de 5 bits que le indica al register bank que registro mandar
 al bus A)
\end_layout

\begin_layout Itemize
Bout (Señal de 6 bits que le indica al register bank que registro mandar
 al bus B)
\end_layout

\begin_layout Itemize
Cout (Señal de 6 bits que le indica al register bank en que registro guardar
 lo que llega por el bus C)
\end_layout

\begin_layout Itemize
KMX (Señal de 1 bit que se manda a un mux que decide si usar el operando
 del bus A o el que llega de la instrucción)
\end_layout

\begin_layout Itemize
SH (Señal de 2 bits que controla el shift register)
\end_layout

\begin_layout Itemize
ALUout (Señal de 4 bits que controla la ALU)
\end_layout

\begin_layout Itemize
DaddOut (Señal de 10 bits que indica la dirección a utilizar de la memoria
 de datos)
\end_layout

\begin_layout Itemize
T5 (Señal de 7 bits que indica el tipo de instrucción en la etapa de writeback)
\end_layout

\begin_layout Subsubsection
Funcionamiento
\end_layout

\begin_layout Itemize
Descripción
\end_layout

\begin_layout Standard
El modulo funciona como un conjunto de 3 registros conectados en cascada,
 dichos registros sirven para separar las señales de control correspondientes
 a distintas etapas del pipeline.
 Ademas de estos registros, el modulo cuenta con un bloque de lógica combinacion
al que se encarga de detectar dependencias entre las etapas y en caso de
 encontrar una, frenar el avance del fetch y el decode mediante la señal
 de HOLD.
\end_layout

\begin_layout Standard
Finalmente, el modulo tiene una serie de bloques entre registros que se
 encarga de la mecánica de 
\begin_inset Quotes eld
\end_inset

Flush
\begin_inset Quotes erd
\end_inset

 al cambiar los valores de C a 
\begin_inset Quotes eld
\end_inset

35
\begin_inset Quotes erd
\end_inset

 y el T a 
\begin_inset Quotes eld
\end_inset

0
\begin_inset Quotes erd
\end_inset

 ya que esto equivale a convertir la instrucción en un NOP
\end_layout

\begin_layout Itemize
Módulos internos
\end_layout

\begin_layout Standard
El MIR unit esta compuesto por tres módulos internos.
 Estos son el MIR, el bloque UC-1 y el bloque UC-2.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename imagenes/MIR.PNG

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Esquema del MIR en Quartus
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
El MIR es simplemente un registro que lee sus entradas en los flancos positivos
 de clock y actualiza sus salidas en el flanco descendente.
 Internamente esta compuesto por flip flops para almacenar los valores de
 los distintos campos de la microinstruccion.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename imagenes/UC1.PNG

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Esquema del bloque UC-1 en Quartus
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
El bloque UC-1 se comporta como un 
\begin_inset Quotes eld
\end_inset

cable
\begin_inset Quotes erd
\end_inset

 cuando la señal de HOLD esta en bajo.Esto quiere decir que cuando la señal
 de HOLD esta baja el bloque simplemente une con un cable Cout con Cin y
 Tout con Tin, esto se hace mediante un mux.
 Sin embargo, cuando la señal de Hold esta en alto, el bloque manda un NOP
 a la salida a partir del próximo flanco descendente de clock desde que
 se puso en alto el HOLD y permanece así hasta que el HOLD vuelva a bajar.
 Mandar un NOP a la salida quiere decir Poner el Cout en 35 (no se escribe
 en ningún registro) y poner el Tout en 0 (La instrucción no modifica nada).
\end_layout

\begin_layout Standard
Este bloque se utiliza para rellenar el pipelines con NOPS cuando se desea
 que siga avanzando el pipeline solo a desde la etapa de opeands en adelante.
 Asimismo, este bloque también se utilizo para implementar la mecánica de
 Flush, utilizando la señal de Flush que entra al MIR unit como señal de
 HOLD para los bloques UC-1 utilizados con dicho propósito.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename imagenes/UC2.PNG

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Esquema del bloque UC-2 en Quartus
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
El bloque UC-2 es el encargado de detectar dependencias entre las distintas
 etapas del pipeline y generar la señal de HOLD asincronicamente en caso
 de encontrar una.
 En principio existen tres tipos de dependencias posibles, RAW (Read After
 Write), WAR (Write After Read), WAW (Write After Write).
 Para nuestro procesador no es posible tener dependencias del tipo WAR ya
 que la lectura se realiza en la etapa 3 del pipeline (Operands) y la única
 escritura que podría alterar la lectura seria un memory read (escribe el
 registro W) ya que se efectuá en la etapa 2.Sin embargo, no se genera una
 dependencia porque la lectura se realiza al comienzo del ciclo con el flanco
 positivo mientras que la escritura se realiza al final con el flanco descendent
e, por lo que no hay dependencia y no es necesario generar un HOLD.
\end_layout

\begin_layout Standard
Para el caso de las dependencias RAW, las mismas se pueden dividir en dos
 casos.
 El primer caso es cuando se desea leer un registro o puerto en la instrucción
 que se encuentra en la etapa 2 (Decode) y se desea escribir en ese mismo
 registro o puerto en una instrucción que se encuentra mas adelante del
 pipeline.
 Mientras que el segundo ocurre cuando se desea leer el registro W en la
 etapa 2 y una instrucción en una etapa posterior del pipeline desea escribir
 el mismo.
 Se distingue este caso del anterior ya que puede detectarse mas fácilmente
 utilizando el campo T.
\end_layout

\begin_layout Standard
Las dependencias WAW son un caso particular.
 Parecería que no hay dependencias del tipo WAW ya que las escrituras se
 realizan unicamente en la etapa 5 del pipeline.Sin embargo, esta el caso
 de Memory read el cual escribe en el registro W y se realiza en la etapa
 2.
 Para asegurar que el valor leído en la etapa 2 no sea sobrescrito por un
 valor escrito en W en una de las etapas posteriores, es necesario generar
 un HOLD cuando la etapa 2 desea hacer un Write W y también la etapa 3 o
 la 4.
\end_layout

\begin_layout Itemize
Simulaciones
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename imagenes/MIRUnitSim.PNG
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Simulación de MIR unit
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
La simulación anterior corresponde al siguiente código:
\end_layout

\begin_layout Enumerate
MOK W, #K
\end_layout

\begin_layout Enumerate
MOV R5, R10
\end_layout

\begin_layout Enumerate
MOV R2, W
\end_layout

\begin_layout Enumerate
ADW R7, R2
\end_layout

\begin_layout Standard
Como puede apreciarse correctamente del resultado de la simulación, el código
 anterior tiene dos dependencias.La primera dependencia es del tipo RAW entre
 la instrucción 1 y la instrucción 3, ya que el MOV necesita leer W pero
 el MOK todavía no escribió W.Cuando el MOV R2,W acaba de ser decodificado
 el MOK esta comenzando la etapa de execute, es por esto que se hace un
 HOLD por un ciclo hasta que el MOK llega al writeback y ya no hay mas una
 dependencia.
\end_layout

\begin_layout Standard
La segunda dependencia es entre la instrucción 3 y la 4, también del tipo
 RAW.
 La instrucción 4 necesita leer el registro 2 pero la instrucción 3 todavía
 no a escrito en el.
 En este caso las instrucciones están una inmediatamente después de la otra,
 por lo que se repite un caso similar al anterior pero la señal de HOLD
 permanece en alto por un ciclo adicional.
\end_layout

\end_body
\end_document
