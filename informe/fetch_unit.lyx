#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1.5cm
\topmargin 2cm
\rightmargin 1.5cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Subsection
FETCH UNIT
\end_layout

\begin_layout Subsubsection

\lang spanish
Descripción General
\end_layout

\begin_layout Standard

\lang spanish
Este bloque maneja la comunicacion entre el programa en ROM, la MIR y la
 Operand Unit.
 A continuación se puede ver el bloque en el main: 
\end_layout

\begin_layout Standard

\lang spanish
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center

\lang spanish
\begin_inset Graphics
	filename imagenes/Screenshot 2020-06-09 02.14.54.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout

\lang spanish
\begin_inset Caption Standard

\begin_layout Plain Layout

\lang spanish
Micro Instruction ROM
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard

\lang spanish
Y por dentro funciona de la siguiente manera:
\end_layout

\begin_layout Standard

\lang spanish
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center

\lang spanish
\begin_inset Graphics
	filename imagenes/Screenshot 2020-06-09 20.13.16.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout

\lang spanish
\begin_inset Caption Standard

\begin_layout Plain Layout

\lang spanish
Micro Instruction ROM
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard

\lang spanish
TERMINAR, HABLAR SOBRE SYNCH UNIT.
\end_layout

\begin_layout Subsubsection

\lang spanish
Inputs
\end_layout

\begin_layout Itemize

\lang spanish
I: Instruccion de 22 bits proveniente del programa alojado en la ROM.
\end_layout

\begin_layout Itemize

\lang spanish
HOLD: Señal que suspende el avance del Fetch Unit si esta prendida.
\end_layout

\begin_layout Itemize

\lang spanish
CK1: Clock de entrada.
\end_layout

\begin_layout Itemize

\lang spanish
Tfoward: T del MIR de la etapa de Write back, utilizado para corroborar
 las predicciones de salto ya realizadas.
\end_layout

\begin_layout Itemize

\lang spanish
W: Registro W de 16 bits provenientes del register bank.
\end_layout

\begin_layout Itemize

\lang spanish
CY: Señal de carry proveniente del ALU unit.
\end_layout

\begin_layout Subsubsection

\lang spanish
Outputs
\end_layout

\begin_layout Itemize

\lang spanish
INST_A: Parte de la instruccion que corresponde a la seleccion del bus A.
 (5 bits)
\end_layout

\begin_layout Itemize

\lang spanish
INST_DAdd: Parte de la instruccion que corresponde a la direccion de memoria
 para instruciones de lectura y escritura de la misma.
 (10 bits)
\end_layout

\begin_layout Itemize

\lang spanish
MI: Direccion de la micro instruccion para leerla de la ROM.
 (7 bits)
\end_layout

\begin_layout Itemize

\lang spanish
MUXSelect: Selector de Mux para MIR, correspondiente a la seleccion del
 bus C.
\end_layout

\begin_layout Itemize

\lang spanish
OPERAND: Operando que es leido por la Operand Unit.
 (16 bits)
\end_layout

\begin_layout Itemize

\lang spanish
Jump: Señal que se prende cuando hay un salto en el programa
\end_layout

\begin_layout Itemize

\lang spanish
IA: Direccion de la proxima instruccion del programa a ejecutar.
 (11 bits)
\end_layout

\begin_layout Itemize

\lang spanish
flush: 1 en caso de que se necesite realizar el flush del pipeline (predicción
 de salto incorrecta).
 0 en otro caso.
\end_layout

\begin_layout Itemize

\lang spanish
preload: Señal de preload proveniente del prediction block dentro del fetch
 unit.
\end_layout

\begin_layout Subsubsection

\lang spanish
Funcionamiento detallado
\end_layout

\begin_layout Standard
La fetch Unit es la encargada de mantener internamente el STACK de saltos
 de subrutina, y de mantener el PC register actualizado con el valor de
 memoria a partir de la cual se obtendrá la próxima instrucción a ejecutar.
 Como internamente este módulo contiene al PC register, el fetch unit también
 contendrá al predictor de saltos, que actualizará el valor del PC en caso
 de que considere que debe realizarse un salto y en aquel caso en que el
 prediction_block detecte que se ha realizado una predicción de salto incorrecta.
\end_layout

\begin_layout Standard
Dado que el módulo de subrutinas impone el PC en caso de RET, el mismo deberá
 estar en comunicación con el módulo de branch prediction de alguna manera.
 Esta conexión se da a partir de la señal preload, que indicará que se deberá
 actualizar el PC con una nueva instrucción (proveniente del bloque predictor
 o del STACK) y unos muxes que eligen el valor de PC a actualizar.
\end_layout

\begin_layout Standard
El branch predictor deberá impedir que el módulo de subrutinas imponga PC
 en casos en que se haya realizado una predicción y se reciba un retorno.
 Esto se debe a que el módulo de branch_predictor no tiene control del stack
 suficiente como para reemplazar los contenidos del mismo en estos casos
 si hubo una predicción incorrecta.
\end_layout

\begin_layout Standard
El mux a la salida del PC register permite imponer una instrucción de fetch
 antes de que se actualice el PC register.
 Esto se debe a que la decisión de salto o no salto se debe tomar antes
 de un flanco positivo, para que el fetch se realice sobre esta nueva instrucció
n en dicho flanco.
 En flanco positivo también se actualizará el valor del PC.
 La señal de preload es la que se encargará de elegir la entrada del mux
 a elegir.
\end_layout

\end_body
\end_document
