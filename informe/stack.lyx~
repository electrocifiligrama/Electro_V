#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1.5cm
\topmargin 2cm
\rightmargin 1.5cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Subsection
Stack
\end_layout

\begin_layout Standard
La base del módulo del stack se basa en un shift register bidireccional.
 La cantidad de niveles requerida define el tamaño del registro, en este
 caso, 4, es decir que el MSB equivaldrá a 3.
 
\end_layout

\begin_layout Standard
El stack implementado con hardware específico tiene una estructura LIFO,
 
\shape italic
last in first out
\shape default
.
 Los registros se inicializan en cero, cuando se pushea un valor al stack
 se shiftean los bits a la derecha, ingresando el valor por el bit más significa
tivo 
\shape italic
-MSB
\shape default
–; mientras que al realizar la acción de pop, se shiftean a la izquierda,
 siendo la salida también por el bit más significativo.
\end_layout

\begin_layout Standard
Lo anterior mencionado se puede ver en la figura 
\begin_inset Formula $\text{\ref{fig:Shift-Register-Bidireccional}}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename imagenes/shift_reg.PNG
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Shift Register Bidireccional
\begin_inset CommandInset label
LatexCommand label
name "fig:Shift-Register-Bidireccional"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
La función del stack es guardar el valor del program counter register (PC),
 que es de 11 bits, por lo que necesitaríamos 11 shift registers para guardar
 cada uno de los bits y a su vez soportar 4 subrutinas anidadas.
 El esquema del que se habla se puede ver en la figura 
\begin_inset Formula $\text{\ref{fig:Sstrucuture}}$
\end_inset

, donde 
\begin_inset Formula $n=10$
\end_inset

, para un total de 11 bits.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename imagenes/strucutre.PNG
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Shift Register Bidireccional
\begin_inset CommandInset label
LatexCommand label
name "fig:Sstrucuture"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Al momento de implementar el shift register en verilog, se sintetizaba de
 manera diferente a la que se esperaba que funcionara por lo que se decidió
 cambiar el esquema y dividir las acciones de 
\shape italic
push
\shape default
 y 
\shape italic
pop
\shape default
 de manera que el diagrama 
\begin_inset Formula $\text{\ref{fig:Shift-Register-Bidireccional}}$
\end_inset

 quedaría de la siguiente forma:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename imagenes/push_pop.PNG
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Shift Register Bidireccional
\begin_inset CommandInset label
LatexCommand label
name "fig:push_pop"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
El bloque de push realiza únicamente un shifteo a la derecha (un push) cuando
 le llega un flanco ascendente de la señal BSR que indica que hubo una instrucci
ón de branch; de manera análoga, el bloque de pop realiza un shifteo a la
 izquierda, para realizar un pop al recibir un flanco ascendente de la señal
 RET que señala una instrucción para volver de la subrutina.
 A la salida se encuentra un mux cuya línea de selección se condice con
 la instrucción de RET puesto que se desea tener salida cuando el valor
 del PC debe ser recuperado, y no cuando se pushea un valor, donde lo único
 que se busca es mantener el stack con sus valores actuales shifteados.
\end_layout

\begin_layout Standard
El bloque final se puede observar en la siguiente imagen:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename imagenes/subrutinecontrolunit.PNG
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Shift Register Bidireccional
\begin_inset CommandInset label
LatexCommand label
name "fig:subrutinecontrolunit"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Recibe los 7 bits más significativos del opcode para poder discernir si
 se trata de un BSR (branch to subroutine) o RET (return to subroutine),
 y además recibe el PC, que el valor a guardar.
 Devuelve ante un pop el valor del PC, y las señales isRET, isBSR se utilizan
 de manera externa para actualizar el valor del PC.
\end_layout

\end_body
\end_document
