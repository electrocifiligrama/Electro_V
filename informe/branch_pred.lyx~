#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1.5cm
\topmargin 2cm
\rightmargin 1.5cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Subsection
BRANCH PREDICTION
\end_layout

\begin_layout Subsubsection
Introducción
\end_layout

\begin_layout Standard
Un problema característico de las arquitecturas que cuentan con pipeline
 es la gran frecuencia de instrucciones de tipo salto/branch condicional
 que hay en los programas.
 Este tipo de instrucciones podría llegar a implicar un cambio en la dirección
 de memoria de la cual se extraerán las próximas instrucciones del programa
 en caso de que la condición a la que hacen referencia se cumpla, por lo
 que ante esta incertidumbre, el diseñador de la arquitectura deberá recurrir
 a alguna de las siguientes estrategias para poder continuar con el flujo
 del programa:
\end_layout

\begin_layout Itemize
Frenar el proceso de extracción de nuevas instrucciones de memoria hasta
 que se determine cuál es la nueva dirección de memoria de la próxima instrucció
n y luego continuar el flujo del programa.
 Se recurrirá en este caso a un atascamiento del pipeline cada vez que se
 reciba una instrucción de salto condicional, por lo que el procesador desaprove
chará poder de cómputo que se aprovecharía en caso de que se utilizara alguna
 de las técnicas mencionadas a continuación.
\end_layout

\begin_layout Itemize
Asumir una política fija y determinada de antemano sobre cómo manejar los
 saltos, como por ejemplo, tomar los saltos hacia adelante, y luego verificar
 si se debió haber realizado el salto cuando se tenga información sobre
 el cumplimiento de la condición dada.
 En caso de que esta se cumpla, se preservarán los cambios y el flujo no
 será interrumpido, mientras que en el caso contrario se deberá volver a
 cargar el pipeline con las instrucciones que se debería haber llamado en
 primer lugar.
\end_layout

\begin_layout Itemize
Realizar una predicción sobre el salto basada en datos que obtienidos dinámicame
nte a lo largo de la ejecución de un programa particular, como por ejemplo,
 la frecuencia con la que se toman los saltos hacia adelante y hacia atrás,
 tomar el salto en caso de que se crea que se debería tomar y luego verificar
 si se ha realizado la predicción correcta, en cuyo caso.
\end_layout

\begin_layout Itemize
Permitir que el compilador agregue información sobre si el salto debería
 tomarse, y luego verificar si el mismo acertó en su predicción.
 En caso de que esto no sea así, se atascará el pipeline como mencionado
 en los casos anteriores.
\end_layout

\begin_layout Standard
El conjunto de técnicas que hacen referencia al hecho de predecir la próxima
 instrucción que se deberá ejecutar ante la presencia de un salto condicional
 son conocidas en inglés bajo el término de 
\begin_inset Quotes eld
\end_inset

branch prediction techniques
\begin_inset Quotes erd
\end_inset

.
 En particular, para el diseño de la arquitectura del EV20, se decidió incorpora
r una estructura de branch prediction que prediga si un salto deberá tomarse
 o no a partir del resultado de las últimas N instrucciones de salto que
 han ocurrido durante la ejecución del programa, con N=7.
 Los detalles de implementación de dicho esquema de predicción serán presentados
 en las siguientes subsecciones.
\end_layout

\begin_layout Subsubsection
Esquema de alto nivel del bloque
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Módulo del Branch Predictor - Alto Nivel
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
El bloque de predicción cuenta con las siguientes entradas:
\end_layout

\begin_layout Itemize
I[21..0]: Última instrucción extraída de memoria, sobre la cual se realizará
 un fetch de la micro-instruction ROM.
 Esta instrucción podrá ser de tipo salto condicional o no.
 De la misma se determinará el tipo de salto (sólo si la instrucción es
 de salto) que se podría llegar a realizar y la dirección de memoria de
 la próxima instrucción en caso de que el mismo sea tomado.
\end_layout

\begin_layout Itemize
PC[10..0]: Valor actual del PC.
\end_layout

\begin_layout Itemize
T[6..0]: Sección T del MIR de la etapa de Write Back del pipeline.
\end_layout

\begin_layout Itemize
W[15..0]: Valor del Working register en todo momento.
\end_layout

\begin_layout Standard
Las salidas del bloque de predicción son:
\end_layout

\begin_layout Itemize
nextOut[10..0]: Señal que indica la próxima dirección que deberá escribirse
 en el PC en caso de tomar el salto
\end_layout

\begin_layout Itemize
PreLoad: Señal que indica qeu deberá escribirse nextOut en el PC.
\end_layout

\begin_layout Itemize
incorrectPred: Señal que indica que se ha realizado una predicción incorrecta
\end_layout

\begin_layout Standard
El esquema permite manejar la predicción de instrucciones de salto anidadas
 sin tener que atorar el pipeline.
 El esquema interactúa a su vez con el STACK, pero deberá realizar HOLD
 del pipeline en casos de Saltos y retornos de subrutina.
\end_layout

\begin_layout Subsubsection
Funcionamiento interno del módulo
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Módulo Branch Predictor - Funcionamiento interno
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
El módulo de branch predictor cuenta con dos ramas principales:
\end_layout

\begin_layout Enumerate
Rama encargada de realizar la predicción de una instrucción de tipo salto.
\end_layout

\begin_layout Enumerate
Rama encarga de revisar si se ha realizado la predicción correcta de una
 instrucción de tipo salto una vez que ya se cuenta con el resultado de
 la condición de la misma.
\end_layout

\begin_layout Standard
El intercambio de inforamción entre las dos ramas es realizado a través
 del uso de unas FIFOs comunes.
 En estas FIFOs se guardará:
\end_layout

\begin_layout Enumerate
El tipo de instruccion sobre la cual se ha realizado una predicción.
\end_layout

\begin_layout Enumerate
La predicción realizada sobre dicha instrucción.
\end_layout

\begin_layout Enumerate
La dirección de a la que se deberá retornar en caso de que la predicción
 realizada haya sido errónea.
\end_layout

\begin_layout Standard
Al realizarse una predicción incorrecta, las colas en cuestión serán vaciadas.
 En caso de que la predicción realizada haya sido correcta, se removerá
 un elemento de la cola.
 Es así como, para varias instrucciones de salto anidadas, la primer instrucción
 de salto sobre la cual se realizó una predicción es revisada primera, y
 en caso de que esta haya sido incorrecta, no se continúa revisando el resto
 de las instrucciones y directamente se realiza el flush del pipeline.
\end_layout

\begin_layout Standard
Los módulos internos del branch prediction están documentados dentro de
 los archivos .v correspondientes.
 Se considera que la documentación de los mismos y el esquema provisto en
 las subsecciones de este informe es lo suficientemente exhaustiva para
 que se pueda comprender el funcionamiento y la conexión de los mismos.
 Sin embargo, se adjunta la documentación de algunos de los módulos más
 importantes a modo de facilitar su comprensión:
\end_layout

\begin_layout Paragraph
Rama 1:
\end_layout

\begin_layout Standard
/************************************** 
\end_layout

\begin_layout Standard
**************prediction_control******* 
\end_layout

\begin_layout Standard
***************************************
\end_layout

\begin_layout Itemize
INPUT: 		
\end_layout

\begin_layout Enumerate
clk: clock signal
\end_layout

\begin_layout Enumerate
I: instruction (from RAM) 	
\end_layout

\begin_layout Enumerate
PC: Current value of PC register.
\end_layout

\begin_layout Itemize
OUTPUT:
\end_layout

\begin_layout Enumerate
enable: 1 if I is an instruction that requires prediction.
 0 otherwise.
\end_layout

\begin_layout Standard
The instructions that require prediction are: 					
\end_layout

\begin_layout Itemize
JZE 								
\end_layout

\begin_layout Itemize
JNE 								
\end_layout

\begin_layout Itemize
JCY		
\end_layout

\begin_layout Enumerate
unconditional: 1 if unconditional jump is required.
 0 in other case.				 		
\end_layout

\begin_layout Enumerate
next: resolves conflict for instructions that don t require prediction 					(exc
ept for BSR) 					
\end_layout

\begin_layout Standard
		If I is an instruction that does not require prediction, 								
\end_layout

\begin_layout Itemize
a) next = PC if I is not JMP.
 								
\end_layout

\begin_layout Itemize
b) next = I[10:0] if I is JMP.
 					
\end_layout

\begin_layout Standard
		If I is an instruction that requires prediction, next is undefined.
 				
\end_layout

\begin_layout Itemize
TIME ANALYSIS (for input and for output):
\end_layout

\begin_layout Enumerate
Continuous: enable is continuously evaluated based on changes on I.
  	
\end_layout

\begin_layout Standard
						If changes on I happen with every negedge, then enable will also be
 updated after each negedge.
 */	
\end_layout

\begin_layout Paragraph
Rama 2:
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
/**************************************
\end_layout

\begin_layout Standard
************prediction_checker********* 
\end_layout

\begin_layout Standard
***************************************
\end_layout

\begin_layout Itemize
INPUT: 		
\end_layout

\begin_layout Enumerate
T: TYPE of the MIR that is currently on the execute step of the pipeline.
\end_layout

\begin_layout Enumerate
W: current working register.
 			
\end_layout

\begin_layout Enumerate
pred_type: type of prediction to be checked (01 for JZE, 10 for JNE, XX
 for JCY) 		
\end_layout

\begin_layout Enumerate
CY: current value of carry.
 		
\end_layout

\begin_layout Enumerate
last_pred: prediction to be checked (1 taken, 0 not taken).
\end_layout

\begin_layout Itemize
OUTPUT: 		
\end_layout

\begin_layout Enumerate
incorrect_pred: 1 if the prediction was incorrect.
 0 Otherwise.
 		
\end_layout

\begin_layout Enumerate
correct_pred: 1 if the prediction should have been "take the branch".
 0 otherwise.
 		
\end_layout

\begin_layout Enumerate
checked: 1 if the current instruction on the execute step of the pipeline
 involved previous prediction when fetched.
 0 Otherwise.
\end_layout

\begin_layout Subsubsection
Método de predicción
\end_layout

\begin_layout Standard
El algoritmo de predicción de salto elegido consiste en registrar las N
 últimas instrucciones de salto que han ocurrido durante la ejecución del
 programa, con 
\begin_inset Formula $N=7$
\end_inset

.
 Para cada uno de estos N saltos, se registra si el salto debería haber
 sido tomado (T) o no (NT).
 Luego, se obtiene la cantidad de saltos de tipo T (
\begin_inset Formula $C_{T}$
\end_inset

) y se los compara con la cantidad de saltos de tipo NT (
\begin_inset Formula $C_{NT}$
\end_inset

).
 Si 
\begin_inset Formula $C_{T}>C_{NT}$
\end_inset

, entonces el próximo salto que se reciba será tomado, mientras que si 
\begin_inset Formula $C_{T}<C_{NT}$
\end_inset

, el próximo salto no deberá tomarse y se continuará con el normal flujo
 del programa.
 Nótese que 
\begin_inset Formula $C_{T}\neq C_{NT}$
\end_inset

 para 
\begin_inset Formula $N=2k+1,$
\end_inset

con 
\begin_inset Formula $k\epsilon N$
\end_inset

.
\end_layout

\begin_layout Standard
Se eligió 
\begin_inset Formula $N=7$
\end_inset

 a para poder presentar el correcto funcionamiento del esquema en el contexto
 de una arquitectura con una capacidad máxima de stack de 4 llamados a subrutina
s.
\end_layout

\begin_layout Standard
Esta técnica presenta dos ventajas que impulsaron a la decisión de la incorporac
ión de la misma al diseño de la arquitectura:
\end_layout

\begin_layout Enumerate
La implementación de la misma resulta relativamente sencilla en comparación
 a otras técnicas de branch prediction.
\end_layout

\begin_layout Enumerate
La bibliografía de la cátedra presenta a este esquema como un esquema de
 predicción que obtuvo resultados empíricos exitosos, tal vez sorpresivamente
 por su algoritmo sencillo.
\end_layout

\begin_layout Standard
Para el caso en que el historial de saltos del momento tenga menos de N
 saltos registrados, el esquema asume que los datos faltantes fueron saltos
 de tipo T, de forma tal que al comienzo del programa se asume que todo
 salto encontrado debe ser tomado.
 Cuando se cuente con N saltos registrados y se reciba una nueva instrucción
 de tipo salto, se deberá eliminar del historial el registro más antiguo
 y reemplazar al mismo con el resultado (T o NT) del salto una vez que se
 haya verificado si la condición de salto se ha cumplido o no.
 Es decir, se prioriza información más reciente con respecto a información
 anterior a esta.
\end_layout

\begin_layout Standard
Nótese que para el caso de loops de muchas iteraciones y/o de secuencias
 de loops, el esquema mencionado debería tener un buen desempeño, salvo
 para algunos casos excepcionales como secuencias de loops de muy pocas
 iteraciones.
\end_layout

\begin_layout Subsubsection
Simulación
\end_layout

\begin_layout Standard
Se simuló el módulo por separado para distintos casos, con resultados satisfacto
rios:
\end_layout

\begin_layout Standard
Descripción de las señales:
\end_layout

\begin_layout Itemize
clk: Señal de clock
\end_layout

\begin_layout Itemize
CY: Carry
\end_layout

\begin_layout Itemize
I: Instrucción recibida en etapa de Fetch.
\end_layout

\begin_layout Itemize
preload: 1 cuando el módulo indica que se ha recibido una instrucción de
 tipo salto.
\end_layout

\begin_layout Itemize
incorrect_pred: 1 cuando predicción incorrecta.
 Cero en cualquier otro caso.
\end_layout

\begin_layout Itemize
T: sección T del MIR en etapa de Write Back del pipeline.
\end_layout

\begin_layout Itemize
NEXT..: Señal que indica el próximo valor del PC.
\end_layout

\begin_layout Itemize
PC: Valor del PC en etapa de fetch.
\end_layout

\begin_layout Itemize
W: Working Register.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename imagenes/JCYsimplepredictiontakenPredijo mal..png
	scale 20

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
JCY simple.
 Predicción: T.
 Predijo mal.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename imagenes/JNEsimplepredictiontakenPredijo bien..png

\end_inset


\begin_inset Graphics
	filename imagenes/JNEsimplepredictiontakenPredijo bien..png
	scale 10

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
JNE simple.
 Predicción: T.
 Predijo bien.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename imagenes/JZEJCYpredictiontakenPredijomaljcy.png
	scale 20

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
JZE + JCY, Predicción: T.
 Predijo mal JZE
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename imagenes/Predicciónnoseadaptaporquenosuficienteserrores.png
	scale 20

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
La predicción no se adapta porque el historial no tiene suficientes errores
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename imagenes/Laprediccionseadaptadespuesdemuchoserrores.png
	scale 20

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
La predicción se adapta después de muchos errores
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_body
\end_document
