// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/07/2020 00:36:26"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ev20main
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ev20main_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
// wires                                               
wire [3:0] ALU_out;
wire [4:0] Asel_out;
wire [5:0] B_sel_out;
wire [5:0] C_sel_out;
wire [15:0] COUT;
wire [9:0] DaddOut;
wire [15:0] fromDATAview;
wire HOLD_CK2_View;
wire Hold_out;
wire [21:0] I_out;
wire [10:0] IA_view;
wire [5:0] IC_view;
wire [4:0] INST_A_view;
wire [9:0] INST_DAdd_view;
wire Kmx_out;
wire [32:0] MI_view;
wire mr_out;
wire MW_out;
wire preload;
wire [6:0] Rom_add_out;
wire [1:0] SH_out;
wire T0;
wire T1;
wire T2;
wire [6:0] T2_view;
wire T3;
wire T4;
wire T5;
wire T6;
wire [15:0] WOUT;

// assign statements (if any)                          
ev20main i1 (
// port map - connection between master ports and signals/registers   
	.ALU_out(ALU_out),
	.Asel_out(Asel_out),
	.B_sel_out(B_sel_out),
	.C_sel_out(C_sel_out),
	.CLK(CLK),
	.COUT(COUT),
	.DaddOut(DaddOut),
	.fromDATAview(fromDATAview),
	.HOLD_CK2_View(HOLD_CK2_View),
	.Hold_out(Hold_out),
	.I_out(I_out),
	.IA_view(IA_view),
	.IC_view(IC_view),
	.INST_A_view(INST_A_view),
	.INST_DAdd_view(INST_DAdd_view),
	.Kmx_out(Kmx_out),
	.MI_view(MI_view),
	.mr_out(mr_out),
	.MW_out(MW_out),
	.preload(preload),
	.Rom_add_out(Rom_add_out),
	.SH_out(SH_out),
	.T0(T0),
	.T1(T1),
	.T2(T2),
	.T2_view(T2_view),
	.T3(T3),
	.T4(T4),
	.T5(T5),
	.T6(T6),
	.WOUT(WOUT)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #25000 1'b1;
	#25000;
end 
endmodule

