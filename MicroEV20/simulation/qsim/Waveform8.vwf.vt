// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/24/2020 19:23:35"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ev20main
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ev20main_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [9:0] DAddIN;
reg [15:0] DATA;
reg MR_IN;
reg MW_IN;
// wires                                               
wire [15:0] RESULT;

// assign statements (if any)                          
ev20main i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.DAddIN(DAddIN),
	.DATA(DATA),
	.MR_IN(MR_IN),
	.MW_IN(MW_IN),
	.RESULT(RESULT)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 
// DAddIN[ 9 ]
initial
begin
	DAddIN[9] = 1'b0;
end 
// DAddIN[ 8 ]
initial
begin
	DAddIN[8] = 1'b0;
end 
// DAddIN[ 7 ]
initial
begin
	DAddIN[7] = 1'b0;
end 
// DAddIN[ 6 ]
initial
begin
	DAddIN[6] = 1'b0;
end 
// DAddIN[ 5 ]
initial
begin
	DAddIN[5] = 1'b0;
end 
// DAddIN[ 4 ]
initial
begin
	DAddIN[4] = 1'b0;
end 
// DAddIN[ 3 ]
initial
begin
	DAddIN[3] = 1'b0;
	DAddIN[3] = #90000 1'b1;
	DAddIN[3] = #40000 1'b0;
end 
// DAddIN[ 2 ]
initial
begin
	DAddIN[2] = 1'b0;
	DAddIN[2] = #90000 1'b1;
	DAddIN[2] = #40000 1'b0;
end 
// DAddIN[ 1 ]
initial
begin
	DAddIN[1] = 1'b0;
	DAddIN[1] = #90000 1'b1;
	DAddIN[1] = #40000 1'b0;
end 
// DAddIN[ 0 ]
initial
begin
	DAddIN[0] = 1'b0;
	DAddIN[0] = #50000 1'b1;
	DAddIN[0] = #130000 1'b0;
end 
// DATA[ 15 ]
initial
begin
	DATA[15] = 1'b0;
end 
// DATA[ 14 ]
initial
begin
	DATA[14] = 1'b0;
end 
// DATA[ 13 ]
initial
begin
	DATA[13] = 1'b0;
end 
// DATA[ 12 ]
initial
begin
	DATA[12] = 1'b0;
end 
// DATA[ 11 ]
initial
begin
	DATA[11] = 1'b0;
end 
// DATA[ 10 ]
initial
begin
	DATA[10] = 1'b0;
end 
// DATA[ 9 ]
initial
begin
	DATA[9] = 1'b0;
end 
// DATA[ 8 ]
initial
begin
	DATA[8] = 1'b0;
end 
// DATA[ 7 ]
initial
begin
	DATA[7] = 1'b0;
end 
// DATA[ 6 ]
initial
begin
	DATA[6] = 1'b0;
end 
// DATA[ 5 ]
initial
begin
	DATA[5] = 1'b0;
end 
// DATA[ 4 ]
initial
begin
	DATA[4] = 1'b0;
end 
// DATA[ 3 ]
initial
begin
	DATA[3] = 1'b0;
end 
// DATA[ 2 ]
initial
begin
	DATA[2] = 1'b1;
	DATA[2] = #90000 1'b0;
end 
// DATA[ 1 ]
initial
begin
	DATA[1] = 1'b1;
	DATA[1] = #90000 1'b0;
end 
// DATA[ 0 ]
initial
begin
	DATA[0] = 1'b1;
	DATA[0] = #90000 1'b0;
end 

// MR_IN
initial
begin
	MR_IN = 1'b0;
	MR_IN = #90000 1'b1;
	MR_IN = #210000 1'b0;
end 

// MW_IN
initial
begin
	MW_IN = 1'b1;
	MW_IN = #90000 1'b0;
end 
endmodule

