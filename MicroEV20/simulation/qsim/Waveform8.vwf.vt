// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/31/2020 02:20:32"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          fifo_TB
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module fifo_TB_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg enable_in;
reg I_in;
reg pop_in;
// wires                                               
wire P_out;

// assign statements (if any)                          
fifo_TB i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.enable_in(enable_in),
	.I_in(I_in),
	.P_out(P_out),
	.pop_in(pop_in)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// enable_in
initial
begin
	enable_in = 1'b0;
	enable_in = #80000 1'b1;
	enable_in = #10000 1'b0;
	enable_in = #10000 1'b1;
	enable_in = #10000 1'b0;
	enable_in = #20000 1'b1;
	enable_in = #10000 1'b0;
	enable_in = #10000 1'b1;
	enable_in = #20000 1'b0;
	enable_in = #20000 1'b1;
	enable_in = #10000 1'b0;
end 

// I_in
initial
begin
	I_in = 1'b0;
	I_in = #20000 1'b1;
	I_in = #30000 1'b0;
	I_in = #10000 1'b1;
	I_in = #10000 1'b0;
	I_in = #10000 1'b1;
	I_in = #10000 1'b0;
	I_in = #10000 1'b1;
	I_in = #10000 1'b0;
	I_in = #50000 1'b1;
	I_in = #10000 1'b0;
end 

// pop_in
initial
begin
	pop_in = 1'b1;
	pop_in = #10000 1'b0;
	pop_in = #20000 1'b1;
	pop_in = #20000 1'b0;
	pop_in = #10000 1'b1;
	pop_in = #10000 1'b0;
	pop_in = #80000 1'b1;
	pop_in = #20000 1'b0;
	pop_in = #20000 1'b1;
	pop_in = #10000 1'b0;
end 
endmodule

