// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/12/2020 15:33:44"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ev20main
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ev20main_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] A;
reg [3:0] aluC;
reg [15:0] B;
reg carryIn;
reg CLK1;
reg HOLD;
reg [19:0] I5;
reg [1:0] SH;
// wires                                               
wire [15:0] C;
wire carryOut;
wire [4:0] pin_name1;
wire pin_name2;
wire [15:0] pin_name3;

// assign statements (if any)                          
ev20main i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.aluC(aluC),
	.B(B),
	.C(C),
	.carryIn(carryIn),
	.carryOut(carryOut),
	.CLK1(CLK1),
	.HOLD(HOLD),
	.I5(I5),
	.pin_name1(pin_name1),
	.pin_name2(pin_name2),
	.pin_name3(pin_name3),
	.SH(SH)
);
initial 
begin 
#1000000 $finish;
end 

// CLK1
always
begin
	CLK1 = 1'b0;
	CLK1 = #5000 1'b1;
	#5000;
end 

// HOLD
initial
begin
	HOLD = 1'b0;
end 
// I5[ 19 ]
initial
begin
	I5[19] = 1'b1;
	I5[19] = #160000 1'b0;
	I5[19] = #160000 1'b1;
	I5[19] = #320000 1'b0;
	I5[19] = #160000 1'b1;
end 
// I5[ 18 ]
initial
begin
	I5[18] = 1'b0;
	I5[18] = #160000 1'b1;
	I5[18] = #160000 1'b0;
	I5[18] = #160000 1'b1;
	I5[18] = #480000 1'b0;
end 
// I5[ 17 ]
initial
begin
	I5[17] = 1'b0;
	I5[17] = #480000 1'b1;
	I5[17] = #160000 1'b0;
end 
// I5[ 16 ]
initial
begin
	I5[16] = 1'b0;
	I5[16] = #480000 1'b1;
	I5[16] = #160000 1'b0;
end 
// I5[ 15 ]
initial
begin
	I5[15] = 1'b1;
	I5[15] = #640000 1'b0;
	I5[15] = #320000 1'b1;
end 
// I5[ 14 ]
initial
begin
	I5[14] = 1'b0;
	I5[14] = #160000 1'b1;
	I5[14] = #160000 1'b0;
	I5[14] = #320000 1'b1;
end 
// I5[ 13 ]
initial
begin
	I5[13] = 1'b1;
	I5[13] = #640000 1'b0;
	I5[13] = #160000 1'b1;
end 
// I5[ 12 ]
initial
begin
	I5[12] = 1'b1;
	I5[12] = #160000 1'b0;
	I5[12] = #160000 1'b1;
	I5[12] = #480000 1'b0;
end 
// I5[ 11 ]
initial
begin
	I5[11] = 1'b1;
	I5[11] = #320000 1'b0;
	I5[11] = #160000 1'b1;
	I5[11] = #160000 1'b0;
	I5[11] = #160000 1'b1;
	I5[11] = #160000 1'b0;
end 
// I5[ 10 ]
initial
begin
	I5[10] = 1'b0;
end 
// I5[ 9 ]
initial
begin
	I5[9] = 1'b1;
	I5[9] = #160000 1'b0;
	I5[9] = #480000 1'b1;
	I5[9] = #320000 1'b0;
end 
// I5[ 8 ]
initial
begin
	I5[8] = 1'b1;
	I5[8] = #800000 1'b0;
	I5[8] = #160000 1'b1;
end 
// I5[ 7 ]
initial
begin
	I5[7] = 1'b0;
	I5[7] = #160000 1'b1;
	I5[7] = #480000 1'b0;
	I5[7] = #160000 1'b1;
end 
// I5[ 6 ]
initial
begin
	I5[6] = 1'b1;
	I5[6] = #160000 1'b0;
	I5[6] = #480000 1'b1;
end 
// I5[ 5 ]
initial
begin
	I5[5] = 1'b1;
	I5[5] = #480000 1'b0;
	I5[5] = #160000 1'b1;
	I5[5] = #160000 1'b0;
	I5[5] = #160000 1'b1;
end 
// I5[ 4 ]
initial
begin
	I5[4] = 1'b1;
	I5[4] = #480000 1'b0;
	I5[4] = #160000 1'b1;
end 
// I5[ 3 ]
initial
begin
	I5[3] = 1'b1;
	I5[3] = #160000 1'b0;
	I5[3] = #480000 1'b1;
	I5[3] = #160000 1'b0;
end 
// I5[ 2 ]
initial
begin
	I5[2] = 1'b1;
	I5[2] = #160000 1'b0;
	I5[2] = #160000 1'b1;
	I5[2] = #320000 1'b0;
	I5[2] = #160000 1'b1;
	I5[2] = #160000 1'b0;
end 
// I5[ 1 ]
initial
begin
	I5[1] = 1'b0;
	I5[1] = #160000 1'b1;
	I5[1] = #320000 1'b0;
	I5[1] = #160000 1'b1;
	I5[1] = #160000 1'b0;
	I5[1] = #160000 1'b1;
end 
// I5[ 0 ]
initial
begin
	I5[0] = 1'b1;
	I5[0] = #320000 1'b0;
	I5[0] = #320000 1'b1;
	I5[0] = #320000 1'b0;
end 
endmodule

