// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/24/2020 17:16:01"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ev20main
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ev20main_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [10:0] address;
reg CLK;
reg [21:0] treg_dio;
// wires                                               
wire [21:0] dio;

// assign statements (if any)                          
assign dio = treg_dio;
ev20main i1 (
// port map - connection between master ports and signals/registers   
	.address(address),
	.CLK(CLK),
	.dio(dio)
);
initial 
begin 
#1000000 $finish;
end 
// address[ 10 ]
initial
begin
	address[10] = 1'b1;
	address[10] = #40000 1'b0;
	address[10] = #10000 1'b1;
	address[10] = #10000 1'b0;
	address[10] = #10000 1'b1;
	address[10] = #10000 1'b0;
	address[10] = #20000 1'b1;
	address[10] = #40000 1'b0;
	address[10] = #10000 1'b1;
	address[10] = #100000 1'b0;
	address[10] = #200000 1'b1;
	address[10] = #90000 1'b0;
end 
// address[ 9 ]
initial
begin
	address[9] = 1'b0;
	address[9] = #10000 1'b1;
	address[9] = #20000 1'b0;
	address[9] = #30000 1'b1;
	address[9] = #10000 1'b0;
	address[9] = #20000 1'b1;
	address[9] = #20000 1'b0;
	address[9] = #20000 1'b1;
	address[9] = #220000 1'b0;
	address[9] = #100000 1'b1;
	address[9] = #90000 1'b0;
end 
// address[ 8 ]
initial
begin
	address[8] = 1'b0;
	address[8] = #30000 1'b1;
	address[8] = #10000 1'b0;
	address[8] = #30000 1'b1;
	address[8] = #10000 1'b0;
	address[8] = #10000 1'b1;
	address[8] = #10000 1'b0;
	address[8] = #40000 1'b1;
	address[8] = #10000 1'b0;
end 
// address[ 7 ]
initial
begin
	address[7] = 1'b1;
	address[7] = #10000 1'b0;
	address[7] = #40000 1'b1;
	address[7] = #20000 1'b0;
	address[7] = #10000 1'b1;
	address[7] = #10000 1'b0;
	address[7] = #40000 1'b1;
	address[7] = #20000 1'b0;
	address[7] = #300000 1'b1;
	address[7] = #90000 1'b0;
end 
// address[ 6 ]
initial
begin
	address[6] = 1'b0;
	address[6] = #10000 1'b1;
	address[6] = #20000 1'b0;
	address[6] = #10000 1'b1;
	address[6] = #20000 1'b0;
	address[6] = #20000 1'b1;
	address[6] = #20000 1'b0;
	address[6] = #10000 1'b1;
	address[6] = #20000 1'b0;
	address[6] = #10000 1'b1;
	address[6] = #10000 1'b0;
	address[6] = #300000 1'b1;
	address[6] = #90000 1'b0;
end 
// address[ 5 ]
initial
begin
	address[5] = 1'b0;
	address[5] = #10000 1'b1;
	address[5] = #10000 1'b0;
	address[5] = #20000 1'b1;
	address[5] = #10000 1'b0;
	address[5] = #10000 1'b1;
	address[5] = #10000 1'b0;
	address[5] = #10000 1'b1;
	address[5] = #60000 1'b0;
	address[5] = #110000 1'b1;
	address[5] = #290000 1'b0;
end 
// address[ 4 ]
initial
begin
	address[4] = 1'b0;
	address[4] = #20000 1'b1;
	address[4] = #20000 1'b0;
	address[4] = #20000 1'b1;
	address[4] = #10000 1'b0;
	address[4] = #10000 1'b1;
	address[4] = #10000 1'b0;
	address[4] = #10000 1'b1;
	address[4] = #20000 1'b0;
	address[4] = #20000 1'b1;
	address[4] = #10000 1'b0;
	address[4] = #100000 1'b1;
	address[4] = #100000 1'b0;
	address[4] = #100000 1'b1;
	address[4] = #90000 1'b0;
end 
// address[ 3 ]
initial
begin
	address[3] = 1'b1;
	address[3] = #20000 1'b0;
	address[3] = #20000 1'b1;
	address[3] = #10000 1'b0;
	address[3] = #10000 1'b1;
	address[3] = #10000 1'b0;
	address[3] = #30000 1'b1;
	address[3] = #10000 1'b0;
	address[3] = #10000 1'b1;
	address[3] = #10000 1'b0;
	address[3] = #10000 1'b1;
	address[3] = #10000 1'b0;
	address[3] = #100000 1'b1;
	address[3] = #100000 1'b0;
	address[3] = #100000 1'b1;
	address[3] = #90000 1'b0;
end 
// address[ 2 ]
initial
begin
	address[2] = 1'b1;
	address[2] = #40000 1'b0;
	address[2] = #10000 1'b1;
	address[2] = #40000 1'b0;
	address[2] = #10000 1'b1;
	address[2] = #10000 1'b0;
	address[2] = #20000 1'b1;
	address[2] = #10000 1'b0;
	address[2] = #10000 1'b1;
	address[2] = #200000 1'b0;
	address[2] = #100000 1'b1;
	address[2] = #90000 1'b0;
end 
// address[ 1 ]
initial
begin
	address[1] = 1'b1;
	address[1] = #10000 1'b0;
	address[1] = #10000 1'b1;
	address[1] = #10000 1'b0;
	address[1] = #10000 1'b1;
	address[1] = #20000 1'b0;
	address[1] = #10000 1'b1;
	address[1] = #20000 1'b0;
	address[1] = #20000 1'b1;
	address[1] = #10000 1'b0;
	address[1] = #30000 1'b1;
	address[1] = #100000 1'b0;
	address[1] = #200000 1'b1;
	address[1] = #90000 1'b0;
end 
// address[ 0 ]
initial
begin
	address[0] = 1'b0;
	address[0] = #10000 1'b1;
	address[0] = #20000 1'b0;
	address[0] = #10000 1'b1;
	address[0] = #20000 1'b0;
	address[0] = #10000 1'b1;
	address[0] = #20000 1'b0;
	address[0] = #30000 1'b1;
	address[0] = #30000 1'b0;
	address[0] = #100000 1'b1;
	address[0] = #100000 1'b0;
	address[0] = #100000 1'b1;
	address[0] = #90000 1'b0;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 
// dio[ 21 ]
initial
begin
	treg_dio[21] = 1'bZ;
end 
// dio[ 20 ]
initial
begin
	treg_dio[20] = 1'bZ;
end 
// dio[ 19 ]
initial
begin
	treg_dio[19] = 1'bZ;
end 
// dio[ 18 ]
initial
begin
	treg_dio[18] = 1'bZ;
end 
// dio[ 17 ]
initial
begin
	treg_dio[17] = 1'bZ;
end 
// dio[ 16 ]
initial
begin
	treg_dio[16] = 1'bZ;
end 
// dio[ 15 ]
initial
begin
	treg_dio[15] = 1'bZ;
end 
// dio[ 14 ]
initial
begin
	treg_dio[14] = 1'bZ;
end 
// dio[ 13 ]
initial
begin
	treg_dio[13] = 1'bZ;
end 
// dio[ 12 ]
initial
begin
	treg_dio[12] = 1'bZ;
end 
// dio[ 11 ]
initial
begin
	treg_dio[11] = 1'bZ;
end 
// dio[ 10 ]
initial
begin
	treg_dio[10] = 1'bZ;
end 
// dio[ 9 ]
initial
begin
	treg_dio[9] = 1'bZ;
end 
// dio[ 8 ]
initial
begin
	treg_dio[8] = 1'bZ;
end 
// dio[ 7 ]
initial
begin
	treg_dio[7] = 1'bZ;
end 
// dio[ 6 ]
initial
begin
	treg_dio[6] = 1'bZ;
end 
// dio[ 5 ]
initial
begin
	treg_dio[5] = 1'bZ;
end 
// dio[ 4 ]
initial
begin
	treg_dio[4] = 1'bZ;
end 
// dio[ 3 ]
initial
begin
	treg_dio[3] = 1'bZ;
end 
// dio[ 2 ]
initial
begin
	treg_dio[2] = 1'bZ;
end 
// dio[ 1 ]
initial
begin
	treg_dio[1] = 1'bZ;
end 
// dio[ 0 ]
initial
begin
	treg_dio[0] = 1'bZ;
end 
endmodule

