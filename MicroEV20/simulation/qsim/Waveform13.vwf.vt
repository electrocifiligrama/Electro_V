// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/26/2020 18:45:34"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ev20main
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ev20main_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] A_IN;
reg [3:0] ALUC_IN;
reg [15:0] B_IN;
reg CLK;
reg [1:0] SH_IN;
// wires                                               
wire [15:0] C_OUT;
wire CY_OUT;

// assign statements (if any)                          
ev20main i1 (
// port map - connection between master ports and signals/registers   
	.A_IN(A_IN),
	.ALUC_IN(ALUC_IN),
	.B_IN(B_IN),
	.C_OUT(C_OUT),
	.CLK(CLK),
	.CY_OUT(CY_OUT),
	.SH_IN(SH_IN)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 
// A_IN[ 15 ]
initial
begin
	A_IN[15] = 1'b0;
	A_IN[15] = #130000 1'b1;
	A_IN[15] = #20000 1'b0;
	A_IN[15] = #30000 1'b1;
	A_IN[15] = #30000 1'b0;
end 
// A_IN[ 14 ]
initial
begin
	A_IN[14] = 1'b0;
	A_IN[14] = #130000 1'b1;
	A_IN[14] = #20000 1'b0;
	A_IN[14] = #30000 1'b1;
	A_IN[14] = #30000 1'b0;
end 
// A_IN[ 13 ]
initial
begin
	A_IN[13] = 1'b0;
	A_IN[13] = #130000 1'b1;
	A_IN[13] = #20000 1'b0;
	A_IN[13] = #30000 1'b1;
	A_IN[13] = #30000 1'b0;
end 
// A_IN[ 12 ]
initial
begin
	A_IN[12] = 1'b0;
	A_IN[12] = #130000 1'b1;
	A_IN[12] = #20000 1'b0;
	A_IN[12] = #30000 1'b1;
	A_IN[12] = #30000 1'b0;
end 
// A_IN[ 11 ]
initial
begin
	A_IN[11] = 1'b0;
	A_IN[11] = #130000 1'b1;
	A_IN[11] = #20000 1'b0;
	A_IN[11] = #30000 1'b1;
	A_IN[11] = #30000 1'b0;
end 
// A_IN[ 10 ]
initial
begin
	A_IN[10] = 1'b0;
	A_IN[10] = #130000 1'b1;
	A_IN[10] = #20000 1'b0;
	A_IN[10] = #30000 1'b1;
	A_IN[10] = #30000 1'b0;
end 
// A_IN[ 9 ]
initial
begin
	A_IN[9] = 1'b0;
	A_IN[9] = #130000 1'b1;
	A_IN[9] = #20000 1'b0;
	A_IN[9] = #30000 1'b1;
	A_IN[9] = #30000 1'b0;
end 
// A_IN[ 8 ]
initial
begin
	A_IN[8] = 1'b0;
	A_IN[8] = #130000 1'b1;
	A_IN[8] = #20000 1'b0;
	A_IN[8] = #30000 1'b1;
	A_IN[8] = #30000 1'b0;
end 
// A_IN[ 7 ]
initial
begin
	A_IN[7] = 1'b0;
	A_IN[7] = #130000 1'b1;
	A_IN[7] = #20000 1'b0;
	A_IN[7] = #30000 1'b1;
	A_IN[7] = #30000 1'b0;
end 
// A_IN[ 6 ]
initial
begin
	A_IN[6] = 1'b0;
	A_IN[6] = #130000 1'b1;
	A_IN[6] = #20000 1'b0;
	A_IN[6] = #30000 1'b1;
	A_IN[6] = #30000 1'b0;
end 
// A_IN[ 5 ]
initial
begin
	A_IN[5] = 1'b0;
	A_IN[5] = #130000 1'b1;
	A_IN[5] = #20000 1'b0;
	A_IN[5] = #30000 1'b1;
	A_IN[5] = #30000 1'b0;
end 
// A_IN[ 4 ]
initial
begin
	A_IN[4] = 1'b0;
	A_IN[4] = #130000 1'b1;
	A_IN[4] = #20000 1'b0;
	A_IN[4] = #30000 1'b1;
	A_IN[4] = #30000 1'b0;
end 
// A_IN[ 3 ]
initial
begin
	A_IN[3] = 1'b0;
	A_IN[3] = #130000 1'b1;
	A_IN[3] = #20000 1'b0;
	A_IN[3] = #30000 1'b1;
	A_IN[3] = #30000 1'b0;
end 
// A_IN[ 2 ]
initial
begin
	A_IN[2] = 1'b0;
	A_IN[2] = #130000 1'b1;
	A_IN[2] = #20000 1'b0;
	A_IN[2] = #30000 1'b1;
	A_IN[2] = #30000 1'b0;
end 
// A_IN[ 1 ]
initial
begin
	A_IN[1] = 1'b0;
	A_IN[1] = #130000 1'b1;
	A_IN[1] = #20000 1'b0;
	A_IN[1] = #30000 1'b1;
	A_IN[1] = #30000 1'b0;
end 
// A_IN[ 0 ]
initial
begin
	A_IN[0] = 1'b1;
	A_IN[0] = #150000 1'b0;
	A_IN[0] = #30000 1'b1;
	A_IN[0] = #30000 1'b0;
end 
// B_IN[ 15 ]
initial
begin
	B_IN[15] = 1'b1;
	B_IN[15] = #150000 1'b0;
	B_IN[15] = #30000 1'b1;
	B_IN[15] = #30000 1'b0;
end 
// B_IN[ 14 ]
initial
begin
	B_IN[14] = 1'b1;
	B_IN[14] = #150000 1'b0;
	B_IN[14] = #30000 1'b1;
	B_IN[14] = #30000 1'b0;
end 
// B_IN[ 13 ]
initial
begin
	B_IN[13] = 1'b1;
	B_IN[13] = #150000 1'b0;
	B_IN[13] = #30000 1'b1;
	B_IN[13] = #30000 1'b0;
end 
// B_IN[ 12 ]
initial
begin
	B_IN[12] = 1'b0;
	B_IN[12] = #130000 1'b1;
	B_IN[12] = #20000 1'b0;
	B_IN[12] = #30000 1'b1;
	B_IN[12] = #30000 1'b0;
end 
// B_IN[ 11 ]
initial
begin
	B_IN[11] = 1'b0;
	B_IN[11] = #130000 1'b1;
	B_IN[11] = #20000 1'b0;
	B_IN[11] = #30000 1'b1;
	B_IN[11] = #30000 1'b0;
end 
// B_IN[ 10 ]
initial
begin
	B_IN[10] = 1'b0;
	B_IN[10] = #130000 1'b1;
	B_IN[10] = #20000 1'b0;
	B_IN[10] = #30000 1'b1;
	B_IN[10] = #30000 1'b0;
end 
// B_IN[ 9 ]
initial
begin
	B_IN[9] = 1'b0;
	B_IN[9] = #130000 1'b1;
	B_IN[9] = #20000 1'b0;
	B_IN[9] = #30000 1'b1;
	B_IN[9] = #30000 1'b0;
end 
// B_IN[ 8 ]
initial
begin
	B_IN[8] = 1'b0;
	B_IN[8] = #130000 1'b1;
	B_IN[8] = #20000 1'b0;
	B_IN[8] = #30000 1'b1;
	B_IN[8] = #30000 1'b0;
end 
// B_IN[ 7 ]
initial
begin
	B_IN[7] = 1'b0;
	B_IN[7] = #130000 1'b1;
	B_IN[7] = #20000 1'b0;
	B_IN[7] = #30000 1'b1;
	B_IN[7] = #30000 1'b0;
end 
// B_IN[ 6 ]
initial
begin
	B_IN[6] = 1'b0;
	B_IN[6] = #130000 1'b1;
	B_IN[6] = #20000 1'b0;
	B_IN[6] = #30000 1'b1;
	B_IN[6] = #30000 1'b0;
end 
// B_IN[ 5 ]
initial
begin
	B_IN[5] = 1'b0;
	B_IN[5] = #130000 1'b1;
	B_IN[5] = #20000 1'b0;
	B_IN[5] = #30000 1'b1;
	B_IN[5] = #30000 1'b0;
end 
// B_IN[ 4 ]
initial
begin
	B_IN[4] = 1'b0;
	B_IN[4] = #130000 1'b1;
	B_IN[4] = #20000 1'b0;
	B_IN[4] = #30000 1'b1;
	B_IN[4] = #30000 1'b0;
end 
// B_IN[ 3 ]
initial
begin
	B_IN[3] = 1'b0;
	B_IN[3] = #130000 1'b1;
	B_IN[3] = #20000 1'b0;
	B_IN[3] = #30000 1'b1;
	B_IN[3] = #30000 1'b0;
end 
// B_IN[ 2 ]
initial
begin
	B_IN[2] = 1'b1;
	B_IN[2] = #150000 1'b0;
	B_IN[2] = #30000 1'b1;
	B_IN[2] = #30000 1'b0;
end 
// B_IN[ 1 ]
initial
begin
	B_IN[1] = 1'b1;
	B_IN[1] = #150000 1'b0;
	B_IN[1] = #30000 1'b1;
	B_IN[1] = #30000 1'b0;
end 
// B_IN[ 0 ]
initial
begin
	B_IN[0] = 1'b0;
	B_IN[0] = #130000 1'b1;
	B_IN[0] = #20000 1'b0;
	B_IN[0] = #30000 1'b1;
	B_IN[0] = #30000 1'b0;
end 
// ALUC_IN[ 3 ]
initial
begin
	ALUC_IN[3] = 1'b0;
	ALUC_IN[3] = #130000 1'b1;
	ALUC_IN[3] = #50000 1'b0;
end 
// ALUC_IN[ 2 ]
initial
begin
	ALUC_IN[2] = 1'b0;
	ALUC_IN[2] = #80000 1'b1;
	ALUC_IN[2] = #50000 1'b0;
	ALUC_IN[2] = #40000 1'b1;
	ALUC_IN[2] = #40000 1'b0;
end 
// ALUC_IN[ 1 ]
initial
begin
	ALUC_IN[1] = 1'b0;
	ALUC_IN[1] = #40000 1'b1;
	ALUC_IN[1] = #40000 1'b0;
	ALUC_IN[1] = #30000 1'b1;
	ALUC_IN[1] = #20000 1'b0;
	ALUC_IN[1] = #20000 1'b1;
	ALUC_IN[1] = #20000 1'b0;
end 
// ALUC_IN[ 0 ]
initial
begin
	ALUC_IN[0] = 1'b0;
	ALUC_IN[0] = #20000 1'b1;
	ALUC_IN[0] = #20000 1'b0;
	ALUC_IN[0] = #20000 1'b1;
	ALUC_IN[0] = #20000 1'b0;
	ALUC_IN[0] = #10000 1'b1;
	ALUC_IN[0] = #20000 1'b0;
	ALUC_IN[0] = #10000 1'b1;
	ALUC_IN[0] = #10000 1'b0;
	ALUC_IN[0] = #10000 1'b1;
	ALUC_IN[0] = #10000 1'b0;
	ALUC_IN[0] = #10000 1'b1;
	ALUC_IN[0] = #10000 1'b0;
	ALUC_IN[0] = #20000 1'b1;
	ALUC_IN[0] = #20000 1'b0;
end 
// SH_IN[ 1 ]
initial
begin
	SH_IN[1] = 1'b0;
	SH_IN[1] = #20000 1'b1;
	SH_IN[1] = #20000 1'b0;
end 
// SH_IN[ 0 ]
initial
begin
	SH_IN[0] = 1'b0;
	SH_IN[0] = #10000 1'b1;
	SH_IN[0] = #10000 1'b0;
	SH_IN[0] = #10000 1'b1;
	SH_IN[0] = #10000 1'b0;
end 
endmodule

